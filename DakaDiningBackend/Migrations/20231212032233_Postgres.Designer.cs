// <auto-generated />
using System;
using DakaDiningBackend.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DakaDiningBackend.Migrations
{
    [DbContext(typeof(DakaContext))]
    [Migration("20231212032233_Postgres")]
    partial class Postgres
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DakaDiningBackend.Entities.OfferEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OfferedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OfferedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<bool>("Purchased")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PurchasedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PurchasedById")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OfferedById");

                    b.HasIndex("PurchasedById");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("DakaDiningBackend.Entities.RequestEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Filled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FilledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilledById")
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FilledById");

                    b.HasIndex("RequestedById");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DakaDiningBackend.Entities.SessionEntity", b =>
                {
                    b.Property<string>("SessionId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("DakaDiningBackend.Entities.UserEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MealSwipes")
                        .HasColumnType("integer");

                    b.Property<int>("MealsOffered")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DakaDiningBackend.Entities.OfferEntity", b =>
                {
                    b.HasOne("DakaDiningBackend.Entities.UserEntity", "OfferedBy")
                        .WithMany("Offers")
                        .HasForeignKey("OfferedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DakaDiningBackend.Entities.UserEntity", "PurchasedBy")
                        .WithMany("OffersFilled")
                        .HasForeignKey("PurchasedById");

                    b.Navigation("OfferedBy");

                    b.Navigation("PurchasedBy");
                });

            modelBuilder.Entity("DakaDiningBackend.Entities.RequestEntity", b =>
                {
                    b.HasOne("DakaDiningBackend.Entities.UserEntity", "FilledBy")
                        .WithMany("RequestsFilled")
                        .HasForeignKey("FilledById");

                    b.HasOne("DakaDiningBackend.Entities.UserEntity", "RequestedBy")
                        .WithMany("Requests")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilledBy");

                    b.Navigation("RequestedBy");
                });

            modelBuilder.Entity("DakaDiningBackend.Entities.SessionEntity", b =>
                {
                    b.HasOne("DakaDiningBackend.Entities.UserEntity", "User")
                        .WithOne("Session")
                        .HasForeignKey("DakaDiningBackend.Entities.SessionEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DakaDiningBackend.Entities.UserEntity", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("OffersFilled");

                    b.Navigation("Requests");

                    b.Navigation("RequestsFilled");

                    b.Navigation("Session");
                });
#pragma warning restore 612, 618
        }
    }
}
